/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Staking, StakingInterface } from "../Staking";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "addressTokenStaking",
        type: "address",
      },
      {
        internalType: "address",
        name: "addressTokenReward",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "stakeHolderAddress",
        type: "address",
      },
    ],
    name: "calculateAvailableRewards",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "dayCount",
        type: "uint256",
      },
    ],
    name: "calculateTps",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "claimRewards",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "dailyReward",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "stakeHolderAddress",
        type: "address",
      },
    ],
    name: "getStakeHolder",
    outputs: [
      {
        internalType: "uint256",
        name: "staked",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "availableReward",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "rewardMissed",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "lastUpdateTime",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "mathConstant",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "rewardProduced",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "stake",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "tokenReward",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "tokenStaking",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalStaked",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "tps",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "updateValues",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x6080604052606460025534801561001557600080fd5b50604051610f23380380610f23833981810160405281019061003791906100dc565b81600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550426003819055505050610161565b6000815190506100d68161014a565b92915050565b600080604083850312156100ef57600080fd5b60006100fd858286016100c7565b925050602061010e858286016100c7565b9150509250929050565b60006101238261012a565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b61015381610118565b811461015e57600080fd5b50565b610db3806101706000396000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c80637dc30ede1161008c578063a694fc3a11610066578063a694fc3a1461022b578063c8f33c9114610247578063c964ad4514610265578063e07ae09214610283576100ea565b80637dc30ede146101bf578063817b1cd2146101dd5780638790c5ee146101fb576100ea565b80634861662a116100c85780634861662a146101355780636e66f6e91461016557806374dc243a146101835780637a1cff77146101b5576100ea565b8063033c10ac146100ef57806305a974dd1461010d578063372500ab1461012b575b600080fd5b6100f76102a1565b6040516101049190610aa7565b60405180910390f35b6101156102a7565b6040516101229190610aa7565b60405180910390f35b6101336102b3565b005b61014f600480360381019061014a919061095f565b6103ed565b60405161015c9190610aa7565b60405180910390f35b61016d610445565b60405161017a9190610a4e565b60405180910390f35b61019d6004803603810190610198919061090d565b61046b565b6040516101ac93929190610ac2565b60405180910390f35b6101bd6104f8565b005b6101c7610551565b6040516101d49190610a4e565b60405180910390f35b6101e5610577565b6040516101f29190610aa7565b60405180910390f35b6102156004803603810190610210919061090d565b61057d565b6040516102229190610aa7565b60405180910390f35b6102456004803603810190610240919061095f565b61060c565b005b61024f61079b565b60405161025c9190610aa7565b60405180910390f35b61026d6107a1565b60405161027a9190610aa7565b60405180910390f35b61028b6107a7565b6040516102989190610aa7565b60405180910390f35b60045481565b670de0b6b3a764000081565b6102bb6104f8565b6000600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905060006103093361057d565b9050600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b8152600401610368929190610a25565b602060405180830381600087803b15801561038257600080fd5b505af1158015610396573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103ba9190610936565b50670de0b6b3a7640000816103cf9190610b9c565b8260020160008282546103e29190610b15565b925050819055505050565b60008060005414156104025760009050610440565b81600054670de0b6b3a764000060025461041c9190610b9c565b6104269190610b6b565b6104309190610b9c565b60045461043d9190610b15565b90505b919050565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080600080600760008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060405180606001604052908160008201548152602001600182015481526020016002820154815250509050806000015181602001518260400151935093509350509193909250565b6000620151806003544261050c9190610bf6565b6105169190610b6b565b905062015180816105279190610b9c565b600360008282546105389190610b15565b92505081905550610548816103ed565b60048190555050565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60005481565b600080600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050670de0b6b3a764000081600101546105d99190610b6b565b816002015482600001546004546105f09190610b9c565b6105fa9190610bf6565b6106049190610b15565b915050919050565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330846040518463ffffffff1660e01b815260040161066b939291906109ee565b602060405180830381600087803b15801561068557600080fd5b505af1158015610699573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106bd9190610936565b506106c66104f8565b806000808282546106d79190610b15565b925050819055506106e7816107ad565b600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160008282546107389190610b15565b9250508190555080600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160008282546107919190610b15565b9250508190555050565b60035481565b60025481565b60015481565b60006107f16040518060400160405280601381526020017f416d6f756e743a2025732c205470733a2025730000000000000000000000000081525083600454610806565b600454826107ff9190610b9c565b9050919050565b6108a083838360405160240161081e93929190610a69565b6040516020818303038152906040527f969cdd03000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506108a5565b505050565b60008151905060006a636f6e736f6c652e6c6f679050602083016000808483855afa5050505050565b6000813590506108dd81610d38565b92915050565b6000815190506108f281610d4f565b92915050565b60008135905061090781610d66565b92915050565b60006020828403121561091f57600080fd5b600061092d848285016108ce565b91505092915050565b60006020828403121561094857600080fd5b6000610956848285016108e3565b91505092915050565b60006020828403121561097157600080fd5b600061097f848285016108f8565b91505092915050565b61099181610c2a565b82525050565b6109a081610c72565b82525050565b60006109b182610af9565b6109bb8185610b04565b93506109cb818560208601610c96565b6109d481610d27565b840191505092915050565b6109e881610c68565b82525050565b6000606082019050610a036000830186610988565b610a106020830185610988565b610a1d60408301846109df565b949350505050565b6000604082019050610a3a6000830185610988565b610a4760208301846109df565b9392505050565b6000602082019050610a636000830184610997565b92915050565b60006060820190508181036000830152610a8381866109a6565b9050610a9260208301856109df565b610a9f60408301846109df565b949350505050565b6000602082019050610abc60008301846109df565b92915050565b6000606082019050610ad760008301866109df565b610ae460208301856109df565b610af160408301846109df565b949350505050565b600081519050919050565b600082825260208201905092915050565b6000610b2082610c68565b9150610b2b83610c68565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610b6057610b5f610cc9565b5b828201905092915050565b6000610b7682610c68565b9150610b8183610c68565b925082610b9157610b90610cf8565b5b828204905092915050565b6000610ba782610c68565b9150610bb283610c68565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610beb57610bea610cc9565b5b828202905092915050565b6000610c0182610c68565b9150610c0c83610c68565b925082821015610c1f57610c1e610cc9565b5b828203905092915050565b6000610c3582610c48565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000610c7d82610c84565b9050919050565b6000610c8f82610c48565b9050919050565b60005b83811015610cb4578082015181840152602081019050610c99565b83811115610cc3576000848401525b50505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000601f19601f8301169050919050565b610d4181610c2a565b8114610d4c57600080fd5b50565b610d5881610c3c565b8114610d6357600080fd5b50565b610d6f81610c68565b8114610d7a57600080fd5b5056fea264697066735822122007d43b8eba52c3904b58d051102488b61d832ad1e3ae935d57db3d2d1f777c3164736f6c63430008040033";

type StakingConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: StakingConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Staking__factory extends ContractFactory {
  constructor(...args: StakingConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "Staking";
  }

  deploy(
    addressTokenStaking: string,
    addressTokenReward: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Staking> {
    return super.deploy(
      addressTokenStaking,
      addressTokenReward,
      overrides || {}
    ) as Promise<Staking>;
  }
  getDeployTransaction(
    addressTokenStaking: string,
    addressTokenReward: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      addressTokenStaking,
      addressTokenReward,
      overrides || {}
    );
  }
  attach(address: string): Staking {
    return super.attach(address) as Staking;
  }
  connect(signer: Signer): Staking__factory {
    return super.connect(signer) as Staking__factory;
  }
  static readonly contractName: "Staking";
  public readonly contractName: "Staking";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): StakingInterface {
    return new utils.Interface(_abi) as StakingInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Staking {
    return new Contract(address, _abi, signerOrProvider) as Staking;
  }
}
