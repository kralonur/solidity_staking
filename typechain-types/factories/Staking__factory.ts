/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  Overrides,
  BigNumberish,
} from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Staking, StakingInterface } from "../Staking";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "addressTokenStaking",
        type: "address",
      },
      {
        internalType: "address",
        name: "addressTokenReward",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_dailyReward",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "stakeHolder",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "Claim",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "stakeHolder",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "Stake",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "stakeHolder",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "Unstake",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "stakeHolderAddress",
        type: "address",
      },
    ],
    name: "calculateAvailableRewards",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "dayCount",
        type: "uint256",
      },
    ],
    name: "calculateTps",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "claimRewards",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "dailyReward",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "stakeHolderAddress",
        type: "address",
      },
    ],
    name: "getStakeHolder",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "staked",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "availableReward",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "rewardMissed",
            type: "uint256",
          },
        ],
        internalType: "struct Staking.StakeHolder",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "lastUpdateTime",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "precision",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "rewardProduced",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_dailyReward",
        type: "uint256",
      },
    ],
    name: "setParameters",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "stake",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "tokenReward",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "tokenStaking",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalStaked",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "tps",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "unstake",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "updateValues",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b5060405162001e1738038062001e178339818101604052810190620000379190620001ea565b620000576200004b620000f060201b60201c565b620000f860201b60201c565b82600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508060038190555042600481905550505050620002b2565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600081519050620001cd816200027e565b92915050565b600081519050620001e48162000298565b92915050565b6000806000606084860312156200020057600080fd5b60006200021086828701620001bc565b93505060206200022386828701620001bc565b92505060406200023686828701620001d3565b9150509250925092565b60006200024d8262000254565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b620002898162000240565b81146200029557600080fd5b50565b620002a38162000274565b8114620002af57600080fd5b50565b611b5580620002c26000396000f3fe608060405234801561001057600080fd5b50600436106101215760003560e01c8063817b1cd2116100ad578063c964ad4511610071578063c964ad45146102c0578063d3b5dc3b146102de578063e07ae092146102fc578063e93b05401461031a578063f2fde38b1461033657610121565b8063817b1cd21461021a5780638790c5ee146102385780638da5cb5b14610268578063a694fc3a14610286578063c8f33c91146102a257610121565b80636e66f6e9116100f45780636e66f6e91461019a578063715018a6146101b857806374dc243a146101c25780637a1cff77146101f25780637dc30ede146101fc57610121565b8063033c10ac146101265780632e17de7814610144578063372500ab146101605780634861662a1461016a575b600080fd5b61012e610352565b60405161013b9190611702565b60405180910390f35b61015e60048036038101906101599190611337565b610358565b005b61016861050d565b005b610184600480360381019061017f9190611337565b610632565b6040516101919190611702565b60405180910390f35b6101a261068a565b6040516101af91906115ac565b60405180910390f35b6101c06106b0565b005b6101dc60048036038101906101d791906112e5565b610738565b6040516101e991906116e7565b60405180910390f35b6101fa6107c7565b005b610204610820565b60405161021191906115ac565b60405180910390f35b610222610846565b60405161022f9190611702565b60405180910390f35b610252600480360381019061024d91906112e5565b61084c565b60405161025f9190611702565b60405180910390f35b610270610985565b60405161027d9190611531565b60405180910390f35b6102a0600480360381019061029b9190611337565b6109ae565b005b6102aa610b29565b6040516102b79190611702565b60405180910390f35b6102c8610b2f565b6040516102d59190611702565b60405180910390f35b6102e6610b35565b6040516102f39190611702565b60405180910390f35b610304610b41565b6040516103119190611702565b60405180910390f35b610334600480360381019061032f9190611337565b610b47565b005b610350600480360381019061034b91906112e5565b610bcd565b005b60055481565b6000600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905080600001548211156103e2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103d990611647565b60405180910390fd5b6103ea6107c7565b8060020154816000015460055461040191906117d6565b61040b9190611830565b81600101600082825461041e919061174f565b92505081905550818160000160008282546104399190611830565b9250508190555061044d8160000154610cc5565b816002018190555081600160008282546104679190611830565b925050819055506104bb3383600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16610cdc9092919063ffffffff16565b3373ffffffffffffffffffffffffffffffffffffffff167f85082129d87b2fe11527cb1b3b7a520aeb5aa6913f88a3d8757fe40d1db02fdd836040516105019190611702565b60405180910390a25050565b6105156107c7565b6000600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905060006105633361084c565b90506105b23382600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16610cdc9092919063ffffffff16565b670de0b6b3a7640000816105c691906117d6565b8260020160008282546105d9919061174f565b925050819055503373ffffffffffffffffffffffffffffffffffffffff167f47cee97cb7acd717b3c0aa1435d004cd5b3c8c57d70dbceb4e4458bbd60e39d4826040516106269190611702565b60405180910390a25050565b60008060015414156106475760009050610685565b81600154670de0b6b3a764000060035461066191906117d6565b61066b91906117a5565b61067591906117d6565b600554610682919061174f565b90505b919050565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6106b8610d62565b73ffffffffffffffffffffffffffffffffffffffff166106d6610985565b73ffffffffffffffffffffffffffffffffffffffff161461072c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161072390611687565b60405180910390fd5b6107366000610d6a565b565b610740611285565b6000600860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020604051806060016040529081600082015481526020016001820154815260200160028201548152505090506107b58361084c565b81602001818152505080915050919050565b600062015180600454426107db9190611830565b6107e591906117a5565b905062015180816107f691906117d6565b60046000828254610807919061174f565b9250508190555061081781610632565b60058190555050565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60015481565b600080600860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050600062015180600454426108a49190611830565b6108ae91906117a5565b90506108b981610e2e565b600081600154670de0b6b3a76400006003546108d591906117d6565b6108df91906117a5565b6108e991906117d6565b6005546108f6919061174f565b905061093a6040518060400160405280601681526020017f4f6c645470733a2025732c204e65775470733a2025730000000000000000000081525060055483610ec7565b670de0b6b3a76400008360010154846002015485600001548461095d91906117d6565b6109679190611830565b610971919061174f565b61097b91906117a5565b9350505050919050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6109fd333083600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16610f66909392919063ffffffff16565b610a056107c7565b8060016000828254610a17919061174f565b92505081905550610a2781610cc5565b600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002016000828254610a78919061174f565b9250508190555080600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000016000828254610ad1919061174f565b925050819055503373ffffffffffffffffffffffffffffffffffffffff167febedb8b3c678666e7f36970bc8f57abf6d8fa2e828c0da91ea5b75bf68ed101a82604051610b1e9190611702565b60405180910390a250565b60045481565b60035481565b670de0b6b3a764000081565b60025481565b610b4f610d62565b73ffffffffffffffffffffffffffffffffffffffff16610b6d610985565b73ffffffffffffffffffffffffffffffffffffffff1614610bc3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bba90611687565b60405180910390fd5b8060038190555050565b610bd5610d62565b73ffffffffffffffffffffffffffffffffffffffff16610bf3610985565b73ffffffffffffffffffffffffffffffffffffffff1614610c49576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c4090611687565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610cb9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cb090611627565b60405180910390fd5b610cc281610d6a565b50565b600060055482610cd591906117d6565b9050919050565b610d5d8363a9059cbb60e01b8484604051602401610cfb929190611583565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050610fef565b505050565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b610ec481604051602401610e429190611702565b6040516020818303038152906040527ff5b1bba9000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506110b6565b50565b610f61838383604051602401610edf939291906115e9565b6040516020818303038152906040527f969cdd03000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506110b6565b505050565b610fe9846323b872dd60e01b858585604051602401610f879392919061154c565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050610fef565b50505050565b6000611051826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166110df9092919063ffffffff16565b90506000815111156110b15780806020019051810190611071919061130e565b6110b0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110a7906116c7565b60405180910390fd5b5b505050565b60008151905060006a636f6e736f6c652e6c6f679050602083016000808483855afa5050505050565b60606110ee84846000856110f7565b90509392505050565b60608247101561113c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161113390611667565b60405180910390fd5b6111458561120b565b611184576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161117b906116a7565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516111ad919061151a565b60006040518083038185875af1925050503d80600081146111ea576040519150601f19603f3d011682016040523d82523d6000602084013e6111ef565b606091505b50915091506111ff82828661121e565b92505050949350505050565b600080823b905060008111915050919050565b6060831561122e5782905061127e565b6000835111156112415782518084602001fd5b816040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161127591906115c7565b60405180910390fd5b9392505050565b60405180606001604052806000815260200160008152602001600081525090565b6000813590506112b581611ada565b92915050565b6000815190506112ca81611af1565b92915050565b6000813590506112df81611b08565b92915050565b6000602082840312156112f757600080fd5b6000611305848285016112a6565b91505092915050565b60006020828403121561132057600080fd5b600061132e848285016112bb565b91505092915050565b60006020828403121561134957600080fd5b6000611357848285016112d0565b91505092915050565b61136981611864565b82525050565b600061137a8261171d565b6113848185611733565b93506113948185602086016118d0565b80840191505092915050565b6113a9816118ac565b82525050565b60006113ba82611728565b6113c4818561173e565b93506113d48185602086016118d0565b6113dd81611961565b840191505092915050565b60006113f560268361173e565b915061140082611972565b604082019050919050565b600061141860208361173e565b9150611423826119c1565b602082019050919050565b600061143b60268361173e565b9150611446826119ea565b604082019050919050565b600061145e60208361173e565b915061146982611a39565b602082019050919050565b6000611481601d8361173e565b915061148c82611a62565b602082019050919050565b60006114a4602a8361173e565b91506114af82611a8b565b604082019050919050565b6060820160008201516114d060008501826114fc565b5060208201516114e360208501826114fc565b5060408201516114f660408501826114fc565b50505050565b611505816118a2565b82525050565b611514816118a2565b82525050565b6000611526828461136f565b915081905092915050565b60006020820190506115466000830184611360565b92915050565b60006060820190506115616000830186611360565b61156e6020830185611360565b61157b604083018461150b565b949350505050565b60006040820190506115986000830185611360565b6115a5602083018461150b565b9392505050565b60006020820190506115c160008301846113a0565b92915050565b600060208201905081810360008301526115e181846113af565b905092915050565b6000606082019050818103600083015261160381866113af565b9050611612602083018561150b565b61161f604083018461150b565b949350505050565b60006020820190508181036000830152611640816113e8565b9050919050565b600060208201905081810360008301526116608161140b565b9050919050565b600060208201905081810360008301526116808161142e565b9050919050565b600060208201905081810360008301526116a081611451565b9050919050565b600060208201905081810360008301526116c081611474565b9050919050565b600060208201905081810360008301526116e081611497565b9050919050565b60006060820190506116fc60008301846114ba565b92915050565b6000602082019050611717600083018461150b565b92915050565b600081519050919050565b600081519050919050565b600081905092915050565b600082825260208201905092915050565b600061175a826118a2565b9150611765836118a2565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561179a57611799611903565b5b828201905092915050565b60006117b0826118a2565b91506117bb836118a2565b9250826117cb576117ca611932565b5b828204905092915050565b60006117e1826118a2565b91506117ec836118a2565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561182557611824611903565b5b828202905092915050565b600061183b826118a2565b9150611846836118a2565b92508282101561185957611858611903565b5b828203905092915050565b600061186f82611882565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006118b7826118be565b9050919050565b60006118c982611882565b9050919050565b60005b838110156118ee5780820151818401526020810190506118d3565b838111156118fd576000848401525b50505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000601f19601f8301169050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f416d6f756e74206578636565647320746865207374616b656420616d6f756e74600082015250565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b611ae381611864565b8114611aee57600080fd5b50565b611afa81611876565b8114611b0557600080fd5b50565b611b11816118a2565b8114611b1c57600080fd5b5056fea2646970667358221220a92fe8e321bc0fed6be18491b8572663ea0f81267d9fb3e36405f56269bdfc2164736f6c63430008040033";

type StakingConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: StakingConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Staking__factory extends ContractFactory {
  constructor(...args: StakingConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "Staking";
  }

  deploy(
    addressTokenStaking: string,
    addressTokenReward: string,
    _dailyReward: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Staking> {
    return super.deploy(
      addressTokenStaking,
      addressTokenReward,
      _dailyReward,
      overrides || {}
    ) as Promise<Staking>;
  }
  getDeployTransaction(
    addressTokenStaking: string,
    addressTokenReward: string,
    _dailyReward: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      addressTokenStaking,
      addressTokenReward,
      _dailyReward,
      overrides || {}
    );
  }
  attach(address: string): Staking {
    return super.attach(address) as Staking;
  }
  connect(signer: Signer): Staking__factory {
    return super.connect(signer) as Staking__factory;
  }
  static readonly contractName: "Staking";
  public readonly contractName: "Staking";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): StakingInterface {
    return new utils.Interface(_abi) as StakingInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Staking {
    return new Contract(address, _abi, signerOrProvider) as Staking;
  }
}
