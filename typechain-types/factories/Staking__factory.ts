/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Staking, StakingInterface } from "../Staking";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "addressTokenStaking",
        type: "address",
      },
      {
        internalType: "address",
        name: "addressTokenReward",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "stakeHolderAddress",
        type: "address",
      },
    ],
    name: "calculateAvailableRewards",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "dayCount",
        type: "uint256",
      },
    ],
    name: "calculateTps",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "claimRewards",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "dailyReward",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "stakeHolderAddress",
        type: "address",
      },
    ],
    name: "getStakeHolder",
    outputs: [
      {
        internalType: "uint256",
        name: "staked",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "availableReward",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "rewardMissed",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "lastUpdateTime",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "mathConstant",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "rewardProduced",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "stake",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "tokenReward",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "tokenStaking",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalStaked",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "tps",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "unstake",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "updateValues",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405260646002553480156200001657600080fd5b50604051620011923803806200119283398181016040528101906200003c9190620000e4565b81600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555042600381905550505062000173565b600081519050620000de8162000159565b92915050565b60008060408385031215620000f857600080fd5b60006200010885828601620000cd565b92505060206200011b85828601620000cd565b9150509250929050565b6000620001328262000139565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b620001648162000125565b81146200017057600080fd5b50565b61100f80620001836000396000f3fe608060405234801561001057600080fd5b50600436106100f55760003560e01c80637a1cff7711610097578063a694fc3a11610066578063a694fc3a14610252578063c8f33c911461026e578063c964ad451461028c578063e07ae092146102aa576100f5565b80637a1cff77146101dc5780637dc30ede146101e6578063817b1cd2146102045780638790c5ee14610222576100f5565b8063372500ab116100d3578063372500ab146101525780634861662a1461015c5780636e66f6e91461018c57806374dc243a146101aa576100f5565b8063033c10ac146100fa57806305a974dd146101185780632e17de7814610136575b600080fd5b6101026102c8565b60405161010f9190610cda565b60405180910390f35b6101206102ce565b60405161012d9190610cda565b60405180910390f35b610150600480360381019061014b9190610b4f565b6102da565b005b61015a6104a3565b005b61017660048036038101906101719190610b4f565b6105dd565b6040516101839190610cda565b60405180910390f35b610194610635565b6040516101a19190610c61565b60405180910390f35b6101c460048036038101906101bf9190610afd565b61065b565b6040516101d393929190610cf5565b60405180910390f35b6101e46106e8565b005b6101ee610741565b6040516101fb9190610c61565b60405180910390f35b61020c610767565b6040516102199190610cda565b60405180910390f35b61023c60048036038101906102379190610afd565b61076d565b6040516102499190610cda565b60405180910390f35b61026c60048036038101906102679190610b4f565b6107fc565b005b61027661098b565b6040516102839190610cda565b60405180910390f35b610294610991565b6040516102a19190610cda565b60405180910390f35b6102b2610997565b6040516102bf9190610cda565b60405180910390f35b60045481565b670de0b6b3a764000081565b6000600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090508060000154821015610364576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161035b90610cba565b60405180910390fd5b61036c6106e8565b806002015481600001546004546103839190610dcf565b61038d9190610e29565b8160010160008282546103a09190610d48565b92505081905550818160000160008282546103bb9190610e29565b925050819055506103cf816000015461099d565b8160020181905550816000808282546103e89190610e29565b92505081905550600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33846040518363ffffffff1660e01b815260040161044c929190610c38565b602060405180830381600087803b15801561046657600080fd5b505af115801561047a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061049e9190610b26565b505050565b6104ab6106e8565b6000600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905060006104f93361076d565b9050600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b8152600401610558929190610c38565b602060405180830381600087803b15801561057257600080fd5b505af1158015610586573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105aa9190610b26565b50670de0b6b3a7640000816105bf9190610dcf565b8260020160008282546105d29190610d48565b925050819055505050565b60008060005414156105f25760009050610630565b81600054670de0b6b3a764000060025461060c9190610dcf565b6106169190610d9e565b6106209190610dcf565b60045461062d9190610d48565b90505b919050565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080600080600760008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060405180606001604052908160008201548152602001600182015481526020016002820154815250509050806000015181602001518260400151935093509350509193909250565b600062015180600354426106fc9190610e29565b6107069190610d9e565b905062015180816107179190610dcf565b600360008282546107289190610d48565b92505081905550610738816105dd565b60048190555050565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60005481565b600080600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050670de0b6b3a764000081600101546107c99190610d9e565b816002015482600001546004546107e09190610dcf565b6107ea9190610e29565b6107f49190610d48565b915050919050565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330846040518463ffffffff1660e01b815260040161085b93929190610c01565b602060405180830381600087803b15801561087557600080fd5b505af1158015610889573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108ad9190610b26565b506108b66106e8565b806000808282546108c79190610d48565b925050819055506108d78161099d565b600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160008282546109289190610d48565b9250508190555080600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160008282546109819190610d48565b9250508190555050565b60035481565b60025481565b60015481565b60006109e16040518060400160405280601381526020017f416d6f756e743a2025732c205470733a20257300000000000000000000000000815250836004546109f6565b600454826109ef9190610dcf565b9050919050565b610a90838383604051602401610a0e93929190610c7c565b6040516020818303038152906040527f969cdd03000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050610a95565b505050565b60008151905060006a636f6e736f6c652e6c6f679050602083016000808483855afa5050505050565b600081359050610acd81610f94565b92915050565b600081519050610ae281610fab565b92915050565b600081359050610af781610fc2565b92915050565b600060208284031215610b0f57600080fd5b6000610b1d84828501610abe565b91505092915050565b600060208284031215610b3857600080fd5b6000610b4684828501610ad3565b91505092915050565b600060208284031215610b6157600080fd5b6000610b6f84828501610ae8565b91505092915050565b610b8181610e5d565b82525050565b610b9081610ea5565b82525050565b6000610ba182610d2c565b610bab8185610d37565b9350610bbb818560208601610ec9565b610bc481610f5a565b840191505092915050565b6000610bdc602083610d37565b9150610be782610f6b565b602082019050919050565b610bfb81610e9b565b82525050565b6000606082019050610c166000830186610b78565b610c236020830185610b78565b610c306040830184610bf2565b949350505050565b6000604082019050610c4d6000830185610b78565b610c5a6020830184610bf2565b9392505050565b6000602082019050610c766000830184610b87565b92915050565b60006060820190508181036000830152610c968186610b96565b9050610ca56020830185610bf2565b610cb26040830184610bf2565b949350505050565b60006020820190508181036000830152610cd381610bcf565b9050919050565b6000602082019050610cef6000830184610bf2565b92915050565b6000606082019050610d0a6000830186610bf2565b610d176020830185610bf2565b610d246040830184610bf2565b949350505050565b600081519050919050565b600082825260208201905092915050565b6000610d5382610e9b565b9150610d5e83610e9b565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610d9357610d92610efc565b5b828201905092915050565b6000610da982610e9b565b9150610db483610e9b565b925082610dc457610dc3610f2b565b5b828204905092915050565b6000610dda82610e9b565b9150610de583610e9b565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610e1e57610e1d610efc565b5b828202905092915050565b6000610e3482610e9b565b9150610e3f83610e9b565b925082821015610e5257610e51610efc565b5b828203905092915050565b6000610e6882610e7b565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000610eb082610eb7565b9050919050565b6000610ec282610e7b565b9050919050565b60005b83811015610ee7578082015181840152602081019050610ecc565b83811115610ef6576000848401525b50505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000601f19601f8301169050919050565b7f416d6f756e74206578636565647320746865207374616b656420616d6f756e74600082015250565b610f9d81610e5d565b8114610fa857600080fd5b50565b610fb481610e6f565b8114610fbf57600080fd5b50565b610fcb81610e9b565b8114610fd657600080fd5b5056fea2646970667358221220ab9c2c80bc4195c30d512f37e35224cd0e3de07b988d220239c567ec494d3ccd64736f6c63430008040033";

type StakingConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: StakingConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Staking__factory extends ContractFactory {
  constructor(...args: StakingConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "Staking";
  }

  deploy(
    addressTokenStaking: string,
    addressTokenReward: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Staking> {
    return super.deploy(
      addressTokenStaking,
      addressTokenReward,
      overrides || {}
    ) as Promise<Staking>;
  }
  getDeployTransaction(
    addressTokenStaking: string,
    addressTokenReward: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      addressTokenStaking,
      addressTokenReward,
      overrides || {}
    );
  }
  attach(address: string): Staking {
    return super.attach(address) as Staking;
  }
  connect(signer: Signer): Staking__factory {
    return super.connect(signer) as Staking__factory;
  }
  static readonly contractName: "Staking";
  public readonly contractName: "Staking";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): StakingInterface {
    return new utils.Interface(_abi) as StakingInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Staking {
    return new Contract(address, _abi, signerOrProvider) as Staking;
  }
}
