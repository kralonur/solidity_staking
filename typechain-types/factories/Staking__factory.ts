/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Staking, StakingInterface } from "../Staking";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "addressTokenStaking",
        type: "address",
      },
      {
        internalType: "address",
        name: "addressTokenReward",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "stakeHolder",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "Claim",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "stakeHolder",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "Stake",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "stakeHolder",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "Unstake",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "stakeHolderAddress",
        type: "address",
      },
    ],
    name: "calculateAvailableRewards",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "dayCount",
        type: "uint256",
      },
    ],
    name: "calculateTps",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "claimRewards",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "dailyReward",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "stakeHolderAddress",
        type: "address",
      },
    ],
    name: "getStakeHolder",
    outputs: [
      {
        internalType: "uint256",
        name: "staked",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "availableReward",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "rewardMissed",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "lastUpdateTime",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "precision",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "rewardProduced",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "stake",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "tokenReward",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "tokenStaking",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalStaked",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "tps",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "unstake",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "updateValues",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x6080604052670de0b6b3a764000060646200001b91906200013a565b6002553480156200002b57600080fd5b506040516200142c3803806200142c8339818101604052810190620000519190620000f9565b81600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555042600381905550505062000222565b600081519050620000f38162000208565b92915050565b600080604083850312156200010d57600080fd5b60006200011d85828601620000e2565b92505060206200013085828601620000e2565b9150509250929050565b60006200014782620001cf565b91506200015483620001cf565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161562000190576200018f620001d9565b5b828202905092915050565b6000620001a882620001af565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b62000213816200019b565b81146200021f57600080fd5b50565b6111fa80620002326000396000f3fe608060405234801561001057600080fd5b50600436106100f55760003560e01c80637dc30ede11610097578063c8f33c9111610066578063c8f33c9114610250578063c964ad451461026e578063d3b5dc3b1461028c578063e07ae092146102aa576100f5565b80637dc30ede146101c8578063817b1cd2146101e65780638790c5ee14610204578063a694fc3a14610234576100f5565b80634861662a116100d35780634861662a1461013e5780636e66f6e91461016e57806374dc243a1461018c5780637a1cff77146101be576100f5565b8063033c10ac146100fa5780632e17de7814610118578063372500ab14610134575b600080fd5b6101026102c8565b60405161010f9190610ec5565b60405180910390f35b610132600480360381019061012d9190610d3a565b6102ce565b005b61013c6104e5565b005b61015860048036038101906101539190610d3a565b61066d565b6040516101659190610ec5565b60405180910390f35b6101766106c5565b6040516101839190610e4c565b60405180910390f35b6101a660048036038101906101a19190610ce8565b6106eb565b6040516101b593929190610ee0565b60405180910390f35b6101c6610778565b005b6101d06107d1565b6040516101dd9190610e4c565b60405180910390f35b6101ee6107f7565b6040516101fb9190610ec5565b60405180910390f35b61021e60048036038101906102199190610ce8565b6107fd565b60405161022b9190610ec5565b60405180910390f35b61024e60048036038101906102499190610d3a565b610936565b005b610258610b13565b6040516102659190610ec5565b60405180910390f35b610276610b19565b6040516102839190610ec5565b60405180910390f35b610294610b1f565b6040516102a19190610ec5565b60405180910390f35b6102b2610b2b565b6040516102bf9190610ec5565b60405180910390f35b60045481565b6000600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090508060000154821115610358576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161034f90610ea5565b60405180910390fd5b610360610778565b806002015481600001546004546103779190610fba565b6103819190611014565b8160010160008282546103949190610f33565b92505081905550818160000160008282546103af9190611014565b925050819055506103c38160000154610b31565b8160020181905550816000808282546103dc9190611014565b92505081905550600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33846040518363ffffffff1660e01b8152600401610440929190610e23565b602060405180830381600087803b15801561045a57600080fd5b505af115801561046e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104929190610d11565b503373ffffffffffffffffffffffffffffffffffffffff167f85082129d87b2fe11527cb1b3b7a520aeb5aa6913f88a3d8757fe40d1db02fdd836040516104d99190610ec5565b60405180910390a25050565b6104ed610778565b6000600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050600061053b336107fd565b9050600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b815260040161059a929190610e23565b602060405180830381600087803b1580156105b457600080fd5b505af11580156105c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105ec9190610d11565b50670de0b6b3a7640000816106019190610fba565b8260020160008282546106149190610f33565b925050819055503373ffffffffffffffffffffffffffffffffffffffff167f47cee97cb7acd717b3c0aa1435d004cd5b3c8c57d70dbceb4e4458bbd60e39d4826040516106619190610ec5565b60405180910390a25050565b600080600054141561068257600090506106c0565b81600054670de0b6b3a764000060025461069c9190610fba565b6106a69190610f89565b6106b09190610fba565b6004546106bd9190610f33565b90505b919050565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080600080600760008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060405180606001604052908160008201548152602001600182015481526020016002820154815250509050806000015181602001518260400151935093509350509193909250565b6000620151806003544261078c9190611014565b6107969190610f89565b905062015180816107a79190610fba565b600360008282546107b89190610f33565b925050819055506107c88161066d565b60048190555050565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60005481565b600080600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050600062015180600354426108559190611014565b61085f9190610f89565b905061086a81610b48565b600081600054670de0b6b3a76400006002546108869190610fba565b6108909190610f89565b61089a9190610fba565b6004546108a79190610f33565b90506108eb6040518060400160405280601681526020017f4f6c645470733a2025732c204e65775470733a2025730000000000000000000081525060045483610be1565b670de0b6b3a76400008360010154846002015485600001548461090e9190610fba565b6109189190611014565b6109229190610f33565b61092c9190610f89565b9350505050919050565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330846040518463ffffffff1660e01b815260040161099593929190610dec565b602060405180830381600087803b1580156109af57600080fd5b505af11580156109c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109e79190610d11565b506109f0610778565b80600080828254610a019190610f33565b92505081905550610a1181610b31565b600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002016000828254610a629190610f33565b9250508190555080600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000016000828254610abb9190610f33565b925050819055503373ffffffffffffffffffffffffffffffffffffffff167febedb8b3c678666e7f36970bc8f57abf6d8fa2e828c0da91ea5b75bf68ed101a82604051610b089190610ec5565b60405180910390a250565b60035481565b60025481565b670de0b6b3a764000081565b60015481565b600060045482610b419190610fba565b9050919050565b610bde81604051602401610b5c9190610ec5565b6040516020818303038152906040527ff5b1bba9000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050610c80565b50565b610c7b838383604051602401610bf993929190610e67565b6040516020818303038152906040527f969cdd03000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050610c80565b505050565b60008151905060006a636f6e736f6c652e6c6f679050602083016000808483855afa5050505050565b600081359050610cb88161117f565b92915050565b600081519050610ccd81611196565b92915050565b600081359050610ce2816111ad565b92915050565b600060208284031215610cfa57600080fd5b6000610d0884828501610ca9565b91505092915050565b600060208284031215610d2357600080fd5b6000610d3184828501610cbe565b91505092915050565b600060208284031215610d4c57600080fd5b6000610d5a84828501610cd3565b91505092915050565b610d6c81611048565b82525050565b610d7b81611090565b82525050565b6000610d8c82610f17565b610d968185610f22565b9350610da68185602086016110b4565b610daf81611145565b840191505092915050565b6000610dc7602083610f22565b9150610dd282611156565b602082019050919050565b610de681611086565b82525050565b6000606082019050610e016000830186610d63565b610e0e6020830185610d63565b610e1b6040830184610ddd565b949350505050565b6000604082019050610e386000830185610d63565b610e456020830184610ddd565b9392505050565b6000602082019050610e616000830184610d72565b92915050565b60006060820190508181036000830152610e818186610d81565b9050610e906020830185610ddd565b610e9d6040830184610ddd565b949350505050565b60006020820190508181036000830152610ebe81610dba565b9050919050565b6000602082019050610eda6000830184610ddd565b92915050565b6000606082019050610ef56000830186610ddd565b610f026020830185610ddd565b610f0f6040830184610ddd565b949350505050565b600081519050919050565b600082825260208201905092915050565b6000610f3e82611086565b9150610f4983611086565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610f7e57610f7d6110e7565b5b828201905092915050565b6000610f9482611086565b9150610f9f83611086565b925082610faf57610fae611116565b5b828204905092915050565b6000610fc582611086565b9150610fd083611086565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615611009576110086110e7565b5b828202905092915050565b600061101f82611086565b915061102a83611086565b92508282101561103d5761103c6110e7565b5b828203905092915050565b600061105382611066565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600061109b826110a2565b9050919050565b60006110ad82611066565b9050919050565b60005b838110156110d25780820151818401526020810190506110b7565b838111156110e1576000848401525b50505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000601f19601f8301169050919050565b7f416d6f756e74206578636565647320746865207374616b656420616d6f756e74600082015250565b61118881611048565b811461119357600080fd5b50565b61119f8161105a565b81146111aa57600080fd5b50565b6111b681611086565b81146111c157600080fd5b5056fea2646970667358221220f1db76175ef1828b243fb9438da086083d04921fa2ace7a49ff0e925d8df897c64736f6c63430008040033";

type StakingConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: StakingConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Staking__factory extends ContractFactory {
  constructor(...args: StakingConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "Staking";
  }

  deploy(
    addressTokenStaking: string,
    addressTokenReward: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Staking> {
    return super.deploy(
      addressTokenStaking,
      addressTokenReward,
      overrides || {}
    ) as Promise<Staking>;
  }
  getDeployTransaction(
    addressTokenStaking: string,
    addressTokenReward: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      addressTokenStaking,
      addressTokenReward,
      overrides || {}
    );
  }
  attach(address: string): Staking {
    return super.attach(address) as Staking;
  }
  connect(signer: Signer): Staking__factory {
    return super.connect(signer) as Staking__factory;
  }
  static readonly contractName: "Staking";
  public readonly contractName: "Staking";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): StakingInterface {
    return new utils.Interface(_abi) as StakingInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Staking {
    return new Contract(address, _abi, signerOrProvider) as Staking;
  }
}
