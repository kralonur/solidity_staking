/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  Overrides,
  BigNumberish,
} from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Staking, StakingInterface } from "../Staking";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "addressTokenStaking",
        type: "address",
      },
      {
        internalType: "address",
        name: "addressTokenReward",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_reward",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_tokenClaimPeriod",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_duration",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "stakeHolder",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "Claim",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "stakeHolder",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "Stake",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "stakeHolder",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "Unstake",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "stakeHolderAddress",
        type: "address",
      },
    ],
    name: "calculateAvailableRewards",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "passedTime",
        type: "uint256",
      },
    ],
    name: "calculateTps",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "claimRewards",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "duration",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "stakeHolderAddress",
        type: "address",
      },
    ],
    name: "getStakeHolder",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "staked",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "availableReward",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "latestTps",
            type: "uint256",
          },
        ],
        internalType: "struct Staking.StakeHolder",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "lastUpdateTime",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "precision",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "reward",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "rewardProduced",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_reward",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_tokenClaimPeriod",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_duration",
        type: "uint256",
      },
    ],
    name: "setParameters",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "stake",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "tokenClaimPeriod",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "tokenReward",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "tokenStaking",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalStaked",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "tps",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "unstake",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "updateValues",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b5060405162001ca738038062001ca78339818101604052810190620000379190620001fa565b620000576200004b6200010060201b60201c565b6200010860201b60201c565b84600860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555083600960006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550826003819055508160058190555080600681905550426004819055505050505050620002ee565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600081519050620001dd81620002ba565b92915050565b600081519050620001f481620002d4565b92915050565b600080600080600060a086880312156200021357600080fd5b60006200022388828901620001cc565b95505060206200023688828901620001cc565b94505060406200024988828901620001e3565b93505060606200025c88828901620001e3565b92505060806200026f88828901620001e3565b9150509295509295909350565b6000620002898262000290565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b620002c5816200027c565b8114620002d157600080fd5b50565b620002df81620002b0565b8114620002eb57600080fd5b50565b6119a980620002fe6000396000f3fe608060405234801561001057600080fd5b50600436106101375760003560e01c80637a1cff77116100b8578063a694fc3a1161007c578063a694fc3a146102f4578063c8f33c9114610310578063d3b5dc3b1461032e578063e07ae0921461034c578063e1d929d71461036a578063f2fde38b1461038857610137565b80637a1cff77146102605780637dc30ede1461026a578063817b1cd2146102885780638790c5ee146102a65780638da5cb5b146102d657610137565b8063372500ab116100ff578063372500ab146101ce5780634861662a146101d85780636e66f6e914610208578063715018a61461022657806374dc243a1461023057610137565b8063033c10ac1461013c5780630fb5a6b41461015a578063228cb733146101785780632e17de781461019657806334c5d2ce146101b2575b600080fd5b6101446103a4565b6040516101519190611556565b60405180910390f35b6101626103aa565b60405161016f9190611556565b60405180910390f35b6101806103b0565b60405161018d9190611556565b60405180910390f35b6101b060048036038101906101ab919061117a565b6103b6565b005b6101cc60048036038101906101c791906111a3565b61051b565b005b6101d66105b1565b005b6101f260048036038101906101ed919061117a565b6106c7565b6040516101ff9190611556565b60405180910390f35b610210610739565b60405161021d919061143e565b60405180910390f35b61022e61075f565b005b61024a60048036038101906102459190611128565b6107e7565b604051610257919061153b565b60405180910390f35b610268610876565b005b61027261092d565b60405161027f919061143e565b60405180910390f35b610290610953565b60405161029d9190611556565b60405180910390f35b6102c060048036038101906102bb9190611128565b610959565b6040516102cd9190611556565b60405180910390f35b6102de610a17565b6040516102eb91906113c3565b60405180910390f35b61030e6004803603810190610309919061117a565b610a40565b005b610318610b5a565b6040516103259190611556565b60405180910390f35b610336610b60565b6040516103439190611556565b60405180910390f35b610354610b6c565b6040516103619190611556565b60405180910390f35b610372610b72565b60405161037f9190611556565b60405180910390f35b6103a2600480360381019061039d9190611128565b610b78565b005b60075481565b60065481565b60035481565b6000600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090508060000154821115610440576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104379061149b565b60405180910390fd5b610448610876565b816001600082825461045a9190611684565b92505081905550818160000160008282546104759190611684565b925050819055506104c93383600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16610c709092919063ffffffff16565b3373ffffffffffffffffffffffffffffffffffffffff167f85082129d87b2fe11527cb1b3b7a520aeb5aa6913f88a3d8757fe40d1db02fdd8360405161050f9190611556565b60405180910390a25050565b610523610cf6565b73ffffffffffffffffffffffffffffffffffffffff16610541610a17565b73ffffffffffffffffffffffffffffffffffffffff1614610597576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161058e906114db565b60405180910390fd5b826003819055508160058190555080600681905550505050565b6105b9610876565b6000600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905060008160010154905060008260010181905550806002600082825461062191906115a3565b925050819055506106753382600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16610c709092919063ffffffff16565b3373ffffffffffffffffffffffffffffffffffffffff167f47cee97cb7acd717b3c0aa1435d004cd5b3c8c57d70dbceb4e4458bbd60e39d4826040516106bb9190611556565b60405180910390a25050565b60008060015414156106dc5760009050610734565b6006546001546106ec919061162a565b82600554670de0b6b3a7640000600354610706919061162a565b610710919061162a565b61071a919061162a565b61072491906115f9565b60075461073191906115a3565b90505b919050565b600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b610767610cf6565b73ffffffffffffffffffffffffffffffffffffffff16610785610a17565b73ffffffffffffffffffffffffffffffffffffffff16146107db576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107d2906114db565b60405180910390fd5b6107e56000610cfe565b565b6107ef6110c8565b6000600a60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060600160405290816000820154815260200160018201548152602001600282015481525050905061086483610959565b81602001818152505080915050919050565b6000600554600454426108899190611684565b61089391906115f9565b905061089e816106c7565b600781905550600554816108b2919061162a565b600460008282546108c391906115a3565b925050819055506000600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905061091633610959565b816001018190555060075481600201819055505050565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60015481565b600080600a60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060405180606001604052908160008201548152602001600182015481526020016002820154815250509050600081604001516007546109da9190611684565b9050670de0b6b3a76400008183600001516109f5919061162a565b6109ff91906115f9565b8260200151610a0e91906115a3565b92505050919050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b610a48610876565b8060016000828254610a5a91906115a3565b9250508190555080600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000016000828254610ab391906115a3565b92505081905550610b09333083600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16610dc2909392919063ffffffff16565b3373ffffffffffffffffffffffffffffffffffffffff167febedb8b3c678666e7f36970bc8f57abf6d8fa2e828c0da91ea5b75bf68ed101a82604051610b4f9190611556565b60405180910390a250565b60045481565b670de0b6b3a764000081565b60025481565b60055481565b610b80610cf6565b73ffffffffffffffffffffffffffffffffffffffff16610b9e610a17565b73ffffffffffffffffffffffffffffffffffffffff1614610bf4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610beb906114db565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610c64576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c5b9061147b565b60405180910390fd5b610c6d81610cfe565b50565b610cf18363a9059cbb60e01b8484604051602401610c8f929190611415565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050610e4b565b505050565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b610e45846323b872dd60e01b858585604051602401610de3939291906113de565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050610e4b565b50505050565b6000610ead826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16610f129092919063ffffffff16565b9050600081511115610f0d5780806020019051810190610ecd9190611151565b610f0c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f039061151b565b60405180910390fd5b5b505050565b6060610f218484600085610f2a565b90509392505050565b606082471015610f6f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f66906114bb565b60405180910390fd5b610f788561103e565b610fb7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fae906114fb565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051610fe091906113ac565b60006040518083038185875af1925050503d806000811461101d576040519150601f19603f3d011682016040523d82523d6000602084013e611022565b606091505b5091509150611032828286611061565b92505050949350505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b60608315611071578290506110c1565b6000835111156110845782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110b89190611459565b60405180910390fd5b9392505050565b60405180606001604052806000815260200160008152602001600081525090565b6000813590506110f88161192e565b92915050565b60008151905061110d81611945565b92915050565b6000813590506111228161195c565b92915050565b60006020828403121561113a57600080fd5b6000611148848285016110e9565b91505092915050565b60006020828403121561116357600080fd5b6000611171848285016110fe565b91505092915050565b60006020828403121561118c57600080fd5b600061119a84828501611113565b91505092915050565b6000806000606084860312156111b857600080fd5b60006111c686828701611113565b93505060206111d786828701611113565b92505060406111e886828701611113565b9150509250925092565b6111fb816116b8565b82525050565b600061120c82611571565b6112168185611587565b9350611226818560208601611724565b80840191505092915050565b61123b81611700565b82525050565b600061124c8261157c565b6112568185611592565b9350611266818560208601611724565b61126f816117b5565b840191505092915050565b6000611287602683611592565b9150611292826117c6565b604082019050919050565b60006112aa602083611592565b91506112b582611815565b602082019050919050565b60006112cd602683611592565b91506112d88261183e565b604082019050919050565b60006112f0602083611592565b91506112fb8261188d565b602082019050919050565b6000611313601d83611592565b915061131e826118b6565b602082019050919050565b6000611336602a83611592565b9150611341826118df565b604082019050919050565b606082016000820151611362600085018261138e565b506020820151611375602085018261138e565b506040820151611388604085018261138e565b50505050565b611397816116f6565b82525050565b6113a6816116f6565b82525050565b60006113b88284611201565b915081905092915050565b60006020820190506113d860008301846111f2565b92915050565b60006060820190506113f360008301866111f2565b61140060208301856111f2565b61140d604083018461139d565b949350505050565b600060408201905061142a60008301856111f2565b611437602083018461139d565b9392505050565b60006020820190506114536000830184611232565b92915050565b600060208201905081810360008301526114738184611241565b905092915050565b600060208201905081810360008301526114948161127a565b9050919050565b600060208201905081810360008301526114b48161129d565b9050919050565b600060208201905081810360008301526114d4816112c0565b9050919050565b600060208201905081810360008301526114f4816112e3565b9050919050565b6000602082019050818103600083015261151481611306565b9050919050565b6000602082019050818103600083015261153481611329565b9050919050565b6000606082019050611550600083018461134c565b92915050565b600060208201905061156b600083018461139d565b92915050565b600081519050919050565b600081519050919050565b600081905092915050565b600082825260208201905092915050565b60006115ae826116f6565b91506115b9836116f6565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156115ee576115ed611757565b5b828201905092915050565b6000611604826116f6565b915061160f836116f6565b92508261161f5761161e611786565b5b828204905092915050565b6000611635826116f6565b9150611640836116f6565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561167957611678611757565b5b828202905092915050565b600061168f826116f6565b915061169a836116f6565b9250828210156116ad576116ac611757565b5b828203905092915050565b60006116c3826116d6565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600061170b82611712565b9050919050565b600061171d826116d6565b9050919050565b60005b83811015611742578082015181840152602081019050611727565b83811115611751576000848401525b50505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000601f19601f8301169050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f416d6f756e74206578636565647320746865207374616b656420616d6f756e74600082015250565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b611937816116b8565b811461194257600080fd5b50565b61194e816116ca565b811461195957600080fd5b50565b611965816116f6565b811461197057600080fd5b5056fea2646970667358221220bfd2dae2c1c76d8c3ca35cbc33c873b5a16f4120f871bcd30fe165f8ceed659264736f6c63430008040033";

type StakingConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: StakingConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Staking__factory extends ContractFactory {
  constructor(...args: StakingConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "Staking";
  }

  deploy(
    addressTokenStaking: string,
    addressTokenReward: string,
    _reward: BigNumberish,
    _tokenClaimPeriod: BigNumberish,
    _duration: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Staking> {
    return super.deploy(
      addressTokenStaking,
      addressTokenReward,
      _reward,
      _tokenClaimPeriod,
      _duration,
      overrides || {}
    ) as Promise<Staking>;
  }
  getDeployTransaction(
    addressTokenStaking: string,
    addressTokenReward: string,
    _reward: BigNumberish,
    _tokenClaimPeriod: BigNumberish,
    _duration: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      addressTokenStaking,
      addressTokenReward,
      _reward,
      _tokenClaimPeriod,
      _duration,
      overrides || {}
    );
  }
  attach(address: string): Staking {
    return super.attach(address) as Staking;
  }
  connect(signer: Signer): Staking__factory {
    return super.connect(signer) as Staking__factory;
  }
  static readonly contractName: "Staking";
  public readonly contractName: "Staking";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): StakingInterface {
    return new utils.Interface(_abi) as StakingInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Staking {
    return new Contract(address, _abi, signerOrProvider) as Staking;
  }
}
